import streamlit as st
import google.generativeai as genai

# Configure your Gemini API key
genai.configure(api_key="AIzaSyCTf9FWtxrR2aXgBmHkNfxYzUFh9vbmlXY")  # Replace with your actual API key

# Generation configuration
generation_config = {
    "temperature": 0.7,
    "top_p": 1,
    "top_k": 1,
    "max_output_tokens": 512
}

# Load Gemini model
model = genai.GenerativeModel(
    model_name="models/gemini-1.5-pro-latest",
    generation_config=generation_config
)

# System prompt tailored for a friendly chatbot for a 24-year-old
system_prompt = (
    "‡§§‡•Å‡§Æ ‡§è‡§ï ‡§´‡•ç‡§∞‡•á‡§Ç‡§°‡§≤‡•Ä, ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü‡§ø‡§µ ‡§î‡§∞ ‡§ï‡•Ç‡§≤ ‡§ö‡•à‡§ü‡§¨‡•â‡§ü ‡§¶‡•ã‡§∏‡•ç‡§§ ‡§π‡•ã, ‡§ú‡•ã ‡§è‡§ï 24 ‡§∏‡§æ‡§≤ ‡§ï‡•á ‡§≤‡§°‡§º‡§ï‡•á ‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à‡•§ "
    "‡§π‡§Æ‡•á‡§∂‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•ã ‚Äî ‡§Ü‡§∏‡§æ‡§®, ‡§¶‡•ã‡§∏‡•ç‡§§‡§æ‡§®‡§æ ‡§î‡§∞ ‡§Æ‡§ú‡§º‡•á‡§¶‡§æ‡§∞ ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç‡•§ "
    "‡§•‡•ã‡§°‡§º‡§æ ‡§π‡•ç‡§Ø‡•Ç‡§Æ‡§∞ ‡§î‡§∞ ‡§Æ‡§ú‡§º‡§æ‡§ï ‡§ö‡§≤‡•á‡§ó‡§æ, ‡§≤‡•á‡§ï‡§ø‡§® ‡§™‡•â‡§ú‡§ø‡§ü‡§ø‡§µ ‡§î‡§∞ ‡§Æ‡•ã‡§ü‡§ø‡§µ‡•á‡§ü‡§ø‡§Ç‡§ó ‡§ü‡•ã‡§® ‡§∞‡§ñ‡•ã‡•§ "
    "‡§§‡•Å‡§Æ ‡§ê‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•ã ‡§ú‡•à‡§∏‡•á ‡§ï‡•ã‡§à ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§¶‡•ã‡§∏‡•ç‡§§ ‡§π‡•ã ‡§ú‡•ã ‡§π‡§∞ ‡§µ‡§ï‡§º‡•ç‡§§ ‡§∏‡§æ‡§• ‡§¶‡•á‡§®‡•á ‡§ï‡•ã ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡•§"
)

# Initialize chat session
if "chat" not in st.session_state:
    st.session_state.chat = model.start_chat(history=[])
    st.session_state.chat.send_message(system_prompt)

# Streamlit layout
st.set_page_config(page_title="‡§¶‡•ã‡§∏‡•ç‡§§‡•Ä ‡§µ‡§æ‡§≤‡§æ ‡§¨‡•â‡§ü üòÑ", page_icon="üó®Ô∏è")
st.title("FREEDY ")
st.markdown("‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§≠‡§æ‡§à! ‡§ï‡•ç‡§Ø‡§æ ‡§π‡§æ‡§≤ ‡§ö‡§æ‡§≤ ‡§π‡•à? ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§ú‡•ã ‡§Æ‡§® ‡§π‡•ã ‡§™‡•Ç‡§õ‡•ã ‡§Ø‡§æ ‡§¨‡§∏ ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•ã‡•§ üòä")

# Show chat history (skip system prompt)
for msg in st.session_state.chat.history[1:]:
    with st.chat_message("user" if msg.role == "user" else "assistant"):
        st.markdown(msg.parts[0].text)

# User input
if prompt := st.chat_input("‡§ï‡•Å‡§õ ‡§™‡•Ç‡§õ‡•ã ‡§Ø‡§æ ‡§¨‡§∏ ‡§¶‡§ø‡§≤ ‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§ï‡§π‡•ã ‚ù§Ô∏è"):
    with st.chat_message("user"):
        st.markdown(prompt)

    # Generate response
    response = st.session_state.chat.send_message(prompt)

    with st.chat_message("assistant"):
        st.markdown(response.text)
